#!/bin/bash

# > extract_draw.sh <
# Converts the code generated by Mike Swanson's Ai->Canvas Export Plug-In 
# for Illustrator into an expression that stores the draw() function
# in a custom JavaScript array member.

# Storing these vector drawing instructions in an array gives me options
# for calling them sequentially in an animation.

# Learn more about the Ai->Canvas Export Plug-In at 
# http://visitmix.com/labs/ai2canvas.

# Written by parisminton for Concrete Daydreams.
# <parisminton@da.ydrea.ms>

#vrs="v 0.2"
#last_change="11/22/11"

OLD_IFS=$IFS
IFS=$(echo -en "\n\b")

character=$1
fileindex=0

echo "$character = new Character(\"$character\", false);
$character.show();
$character.sequence.main.cels = [" > cels.js

# ...we need to be able to refer to these files by a unique index number, so we\'ll store them in an array ...
for filename in $(ls -1 *.html); do
  files[$fileindex]=$filename
  fileindex=$(($fileindex+1))
  filetotal=${#files[*]}
done

for ((i=0; i<$filetotal; i++)); do
  if [ "$i" -eq "$((${#files[*]} - 1))" ]; then
    sed '
        /function vaulter/, /}$/ !d
          s/    function/  function/
          s/ [a-zA-Z0-9]*(ctx) {$/ (ctx) {\
    if \('"$character"'.visible\) {/
          s/ctx.moveTo(\([0-9][0-9\.]*, [0-9][0-9\.]*\));/recordMoveTo('"$character"', ctx, \1);/
          s/ctx.lineTo(\([0-9][0-9\.]*, [0-9][0-9\.]*\));/recordLineTo('"$character"', ctx, \1);/
          s/ctx.bezierCurveTo(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordBezierCurveTo('"$character"', ctx, \1);/
          s/ctx.strokeRect(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordStrokeRect('"$character"', ctx, \1);/
          s/ctx.fillRect(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordFillRect('"$character"', ctx, \1);/
          s/}$/}\
  }\
]/
        ' < ${files[$i]} >> cels.js


  else
    sed '
        /function vaulter/, /}$/ !d
          s/    function/  function/
          s/ [a-zA-Z0-9]*(ctx) {$/ (ctx) {\
    if \('"$character"'.visible\) {/
          s/ctx.moveTo(\([0-9][0-9\.]*, [0-9][0-9\.]*\));/recordMoveTo('"$character"', ctx, \1);/
          s/ctx.lineTo(\([0-9][0-9\.]*, [0-9][0-9\.]*\));/recordLineTo('"$character"', ctx, \1);/
          s/ctx.bezierCurveTo(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordBezierCurveTo('"$character"', ctx, \1);/
          s/ctx.strokeRect(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordStrokeRect('"$character"', ctx, \1);/
          s/ctx.fillRect(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordFillRect('"$character"', ctx, \1);/
          s/}$/}\
  },\
/
        ' < ${files[$i]} >> cels.js
  fi

done

IFS=$OLD_IFS
