#!/bin/bash

# > celhelper.sh <
# Converts the code generated by Mike Swanson's Ai->Canvas Export Plug-In 
# for Illustrator into an expression that stores the draw() function
# in a custom JavaScript array member.

# Storing these vector drawing instructions in an array gives me options
# for calling them sequentially in an animation.

# Learn more about the Ai->Canvas Export Plug-In at 
# http://visitmix.com/labs/ai2canvas.

# Written by parisminton for Concrete Daydreams.
# <parisminton@da.ydrea.ms>

#vrs="v 0.3"
#last_change="11/24/11"

OLD_IFS=$IFS
IFS=$(echo -en "\n\b")

fileindex=0
args=($*)

# ...declare our variables at the top of the function...
for ((i=0; i<${#args[*]}; i++ )); do
  if [ "$arg_list_string" ]; then
    arg_list_string=$(echo $arg_list_string | sed -n 's/\([a-zA-Z0-9_\-][a-zA-Z0-9_ \-\,]*\);$/\1, '"${args[$i]}"';/p')
  else
    arg_list_string="$1;"
  fi
done

# ...we need to be able to refer to these files by a unique index number, so we\'ll store them in an array...
for filename in $(ls -1 *.html); do
  files[$fileindex]=$filename
  fileindex=$(($fileindex+1))
  filetotal=${#files[*]}
done

echo "function loadCharacters () {
  var $arg_list_string
  " >> cels.js

for ((j=0; j<${#args[*]}; j++)); do

  echo "  ${args[$j]} = new Character(\"${args[$j]}\", false);
  ${args[$j]}.show();
  ${args[$j]}.sequence.main.cels = [" >> cels.js

  for ((k=0; k<$filetotal; k++)); do
    if [ "$k" -eq "$((${#files[*]} - 1))" ]; then
      sed '
          /function vaulter/, /}$/ !d
            s/      \/\//        \/\//
            s/ [a-zA-Z0-9]*(ctx) {$/ (ctx) {\
      if \('"${args[$j]}"'.visible\) {/
            s/ctx\./  ctx\./
            s/ctx.moveTo(\([0-9][0-9\.]*, [0-9][0-9\.]*\));/recordMoveTo('"${args[$j]}"', ctx, \1);/
            s/ctx.lineTo(\([0-9][0-9\.]*, [0-9][0-9\.]*\));/recordLineTo('"${args[$j]}"', ctx, \1);/
            s/ctx.bezierCurveTo(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordBezierCurveTo('"${args[$j]}"', ctx, \1);/
            s/ctx.strokeRect(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordStrokeRect('"${args[$j]}"', ctx, \1);/
            s/ctx.fillRect(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordFillRect('"${args[$j]}"', ctx, \1);/
          s/}$/  }\
    }\
  ];\
/
          ' < ${files[$k]} >> cels.js


    else
      sed '
          /function vaulter/, /}$/ !d
            s/      \/\//        \/\//
            s/ [a-zA-Z0-9]*(ctx) {$/ (ctx) {\
      if \('"${args[$j]}"'.visible\) {/
            s/ctx\./  ctx\./
            s/ctx.moveTo(\([0-9][0-9\.]*, [0-9][0-9\.]*\));/recordMoveTo('"${args[$j]}"', ctx, \1);/
            s/ctx.lineTo(\([0-9][0-9\.]*, [0-9][0-9\.]*\));/recordLineTo('"${args[$j]}"', ctx, \1);/
            s/ctx.bezierCurveTo(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordBezierCurveTo('"${args[$j]}"', ctx, \1);/
            s/ctx.strokeRect(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordStrokeRect('"${args[$j]}"', ctx, \1);/
            s/ctx.fillRect(\([0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*, [0-9][0-9\.]*\));/recordFillRect('"${args[$j]}"', ctx, \1);/
            s/}$/  }\
    },\
/
          ' < ${files[$k]} >> cels.js
    fi

  done

done

for ((l=0; l<${#args[*]}; l++ )); do
  echo "  ${args[$l]}.load();" >> cels.js
done

echo "
};" >> cels.js

IFS=$OLD_IFS
